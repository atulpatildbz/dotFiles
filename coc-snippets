
# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet sync "SyncLog" b
SyncLog.info("***AtulLog: $1 %s" % ($1))
endsnippet

snippet rce "React Component" b
import React, {Component} from "react";

export class $1 extends Component {
	render() {
		return ();
	}
}

export default $1;
endsnippet


snippet rcc "React Component with connect" b
import React, {Component} from "react";
import { connect } from "react-redux";

export class $1 extends Component {
	render() {
		return ();
	}
}

const mapStateToProps = ({}) => ({})

export default connect(mapStateToProps)($1);
endsnippet


# arrow function method
snippet met "Arrow function method" b
$1 = () => {}
endsnippet

# test
snippet test "UT it snippet" b
it("should $1", () => { $2 });
endsnippet

snippet desc "UT desc snippet" b
desc("$1", () => { $2 });
endsnippet
snippet beforeEach "UT beforeEach snippet" b
beforeEach(() => { wrapper=$1 });
endsnippet
snippet afterEach "UT afterEach snippet" b
afterEach(() => { wrapper = null; $1 });
endsnippet

snippet cp "const from props" b
const {$1} = this.props;
endsnippet

snippet cs "const from state" b
const {$1} = this.state;
endsnippet
